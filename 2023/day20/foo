    // Find all the nodes that feed into the last conjunction node
    let mut last_conjunction_feeders = HashMap::new();
    for (input_modname, module) in &map {
        match module {
            Module::FlipFlop(_, dest) | Module::Conjunction(_, dest) | Module::Broadcast(dest) => {
                if dest.contains(&last_conjuction) {
                    last_conjunction_feeders.insert(input_modname.clone(), 0);
                }
            }
        }
    }

    for (input_modname, module) in &map {
        let targets: Vec<String>;
        match module {
            Module::FlipFlop(_, dest) | Module::Conjunction(_, dest) | Module::Broadcast(dest) => targets = dest.clone(),
        }
        for target in targets {
            if let Some(target_mod) = map.get(&target) {
                match target_mod {
                    Module::Conjunction(_, ) => {
                        temp.entry(target).and_modify(|e| e.push(input_modname.to_string())).or_insert(vec![input_modname.to_string()]);
                    },
                    _ => {},
                };
            }
        }
    }
    for (target, inputs) in temp {
        map.entry(target).and_modify(|e| {
            match e {
                Module::Conjunction(input_map, _) => {
                    for input in inputs {
                        input_map.insert(input, false);
                    }
                },
                _ => {},
            };
        });
    }

    println!("{last_conjunction_feeders:?}");

    let mut q = VecDeque::new();
    let mut should_break = false;
    let mut lo = 0;
    let mut hi = 0;
    for i in 0..1000 {
        println!("Iteration {i:?}");
        if should_break {
            break;
        }
        q.push_back(("button".to_string(), "broadcaster".to_string(), false));

        while let Some((source, dest, pulse)) = q.pop_front() {
            if pulse {
                hi += 1;
            } else {
                lo += 1;
            }
            last_conjunction_feeders.entry(source.clone()).and_modify(|e| {
                // println!("{source} -> {dest} : {pulse}");
                if dest == last_conjuction && pulse && *e == 0 {
                    *e = i;
                }
            });
            // println!("{last_conjunction_feeders:?}");
            if last_conjunction_feeders.values().all(|&x| x > 0) {
                should_break = true;
                break;
            }
